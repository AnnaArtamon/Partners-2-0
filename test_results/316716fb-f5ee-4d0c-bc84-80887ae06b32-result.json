{"name": "test_place_existing_order", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nKeyError: 0", "trace": "self = <test.test_orders.TestOrders object at 0x7fc510601e20>\n\n    @pytest.mark.xfail\n    def test_place_existing_order(self):\n        response = MyRequests.post(\"/orders\", headers=auth_headers, data=order_body.encode('utf-8'))\n        external_id = json.loads(order_body)[\"orders\"][0][\"external_id\"]\n        Assertions.assert_accepted(response, external_id, f\"{external_id} is not in accepted array\")\n        response2 = MyRequests.post(\"/orders\", headers=auth_headers, data=order_body.encode('utf-8'))\n>       Assertions.assert_rejected(response2, external_id, f\"{external_id} is not in rejected array\")\n\ntest/test_orders.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\nexpected_value = '4acc35b6-50a7-11eb-9370-005053870080'\nerror_message = '4acc35b6-50a7-11eb-9370-005053870080 is not in rejected array'\n\n    def assert_rejected(response: Response, expected_value, error_message):\n        key = \"rejected\"\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. The text of the response is {response.text}\"\n        assert key in response_as_dict, f\"There's no key {key} in the response\"\n>       assert response_as_dict[0][key][0] == expected_value, f\"{error_message}\"\nE       KeyError: 0\n\nlib/assertions.py:32: KeyError"}, "start": 1631651551248, "stop": 1631651552310, "uuid": "ba6fff19-467e-444d-bc42-c6474fa0215e", "historyId": "0097b8a5a23cefed29a9bd982d2c1e46", "testCaseId": "72faafce51db240aef469d60499e9348", "fullName": "test.test_orders.TestOrders#test_place_existing_order", "labels": [{"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_orders"}, {"name": "subSuite", "value": "TestOrders"}, {"name": "host", "value": "60ba401c7271"}, {"name": "thread", "value": "7-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_orders"}]}